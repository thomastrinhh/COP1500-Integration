# Thomas Trinh Integration Project for COP 1500.
# This program is intended to resemble an "Assistant" by carrying out computations and responding to user inputs.
import random
import math
import time

# Introductory statement.
name = input('What is your name? ')
print('\nHello ' + name + '! ',end='')
print()
print('I can aid in performing various computations as well as provide entertainment.')
print('You are currently in the console.')


# Allows for pauses between inputs and outputs in order to make the program seem more human.
def dot():
    for t in range(3):
        print(".", end="")
        time.sleep(0.3)


# Parameter accepting function.
def math_calculator(user_num1, operator, user_num2):
    print()
    # Addition arithmetic.
    if operator == "+":
        solution = float(user_num1) + float(user_num2)
        print(user_num1, "+", user_num2, "=", solution)
    # Subtraction arithmetic.
    elif operator == "-":
        solution = float(user_num1) - float(user_num2)
        print(user_num1, "-", user_num2, "=", solution)
    # Multiplication arithmetic.
    elif operator == "*":
        solution = float(user_num1) * float(user_num2)
        print(user_num1, "*", user_num2, "=", solution)
    # Division arithmetic.
    elif operator == "/":
        solution = float(user_num1) / float(user_num2)
        print(user_num1, "/", user_num2, "=", solution)
        if user_num1 > user_num2: 
            remainder = float(user_num1) % float(user_num2)
            print("(" + user_num2, "divides into", user_num1, 
                  format(float(user_num1) // float(user_num2), "0.0f"), end="")
            print(" time(s) with a remainder of ", format(remainder, "0.0f"), ".)", sep="")
    # Computes exponents.
    elif operator == "^":
        solution = float(user_num1) ** float(user_num2)
        print(user_num1, "^", user_num2, "=", solution)
    # Prompts user if they would like the value generated by the above functions to be rounded or not.
    round_for_user = input("\nWould you like me to round this value? ")
    if round_for_user.lower() == "yes" or round_for_user.lower() == "y":
        # Prompts user for how many decimal places they would like the value to be rounded to. 
        decimal_places = int(input("How many places would you like me to round to? "))
        try:
            int(decimal_places)
        except ValueError or TypeError:
            print('\nThat is not a valid integer ' + name + '. Please try again.\n')
        rounded_value = round(solution, decimal_places)
        print("\nSolution rounded to", decimal_places, "decimal places:", rounded_value)
        loop()
    elif round_for_user.lower() == "no" or round_for_user.lower() == "n":
        loop()
    else:
        print("Oops! Sorry but that is an invalid input", name, ". Returning back to console.", sep="")
    math_main()


# This function takes user inputs and sends them as arguments to math_calculator.
def math_main():
    user_num1 = input("\nEnter your first number: ")
    try:
        float(user_num1)
    except ValueError or TypeError:
        print("Oops! That does not appear to be a valid number. Please try again. ")
        math_main()   
    print('\nAddition: [+] \nSubtraction: [-] \nMultiplication: [*] \nDivision: [/] \nExponential values: [^]\n')
    operator_list = ["+", "-", "*", "/", "^"]
    operator = input("Choose from the list of operators above: ")
    while operator not in list(operator_list):
        print("Oops! That does not appear to be a valid operator. Please try again. ")
        operator = input("Choose from the list of operators: ")     
    user_num2 = input("\nEnter your second number: ")
    try:
        float(user_num2)
    except ValueError or TypeError:
        print("Oops! That does not appear to be a valid number. Please try again. ")
        math_main()
    # Passes argument to math_calculator function as parameter.
    math_calculator(user_num1, operator, user_num2)


# This function accepts inputs from user and converts the value into either radians or degrees.
def radians():  
    # Conversion of radians to degrees or vice versa.
    degree = math.pi/180
    radian = 180/math.pi
    
    number = input("\nInput a number: ")
    # Verifies if numbers are integers or not.
    try:
        float(number)
        validation = True
    except ValueError:
        validation = False
    if not validation:
        print('\nThat is not a valid integer ' + name + '. Please try again.')
        radians()
    rad_or_deg = input("Would you like to convert to radians or degrees? ")
    if rad_or_deg.lower() == "rad" or rad_or_deg.lower() == "radians":
        print(number, "radians is equal to", format(float(number) * radian, "0.3f"), "degrees.")
    if rad_or_deg.lower() == "deg" or rad_or_deg.lower() == "degrees":
        print(number, "degrees is equal to", format(float(number) * degree, "0.3f"), "radians.\n")
    loop()
    radians()


# Parameter accepting function.
def mean_med_range_calculator(ask_user, length, data):
    if ask_user.lower() == 'mean':
        # Takes sum of the list and divides it by the amount of elements in the list.
        counter = length
        range_value = sum(data)/counter
        print("The mean value out of the", length, "values you entered was:", range_value)
        
    if ask_user.lower() == "median":        
        # If the the length of list is odd, the median value will be the value in the middle of the list.
        if length % 2 != 0:
            half_of_list = int(length/2)
            median = data[half_of_list]
            print("The median value out of the", length, "values you entered was:", median)       
        # If the length of list is even, the two middle values will be divided to calculate the midpoint.   
        else:
            half_1 = int(length/2) - 1
            half_2 = int(length/2)
            sum_midpoints = (data[half_1] + data[half_2])
            median = (sum_midpoints / 2)
            print("The median value out of the", length, "values you entered was:", median)
    elif ask_user.lower() == "range":
        # Takes the maximum value of the list and subtracts it by the minimum value.
        max_value = max(data)
        range_value = max_value - data[0]
        print("The range value out of the", length, "values you entered was:", range_value)

        
# This function takes the inputs from the user and passes them as arguments to mean_med_range_calculator.
def mean_med_range_inputs():
    ask_user = input("\nWould you like to calculate mean, median, or range? ")
    if ask_user.lower() == "mean" or ask_user.lower() == "median" or ask_user.lower() == "range":
        # Determines length of list.
        n = input("\nHow many values would you like to compute? ")
        # Verifies if length of list is an integer value.
        try:
            int(n)
            validation = True
        except ValueError or TypeError:
            validation = False
        if not validation:
            print("Oops! That does not appear to be a valid number. Please try again.")
            mean_med_range_inputs()
        length = int(n)
        print("Okay! You chose to enter", length, "values. ")
        data = []
        # Prompts user for values to be entered in list. 
        for i in range(length):
            number = input("Enter a number: ")
            try:
                float(number)
                validation = True
            except ValueError or TypeError:
                validation = False
            if not validation:
                print("Oops! That does not appear to be a valid number. Please try again.")
                mean_med_range_inputs()
            values = float(number)
            data.append(values)
            data.sort()
    else:
        print("Oops! Sorry but that is an invalid input. Please try again.")
        mean_med_range_inputs()
    # Passes arguments to mean_med_range_calculator function.
    mean_med_range_calculator(ask_user, length, data)
    loop()
    mean_med_range_inputs()
    

# This function generates a random number and prompts user to guess the number within three tries.
def guessing_game():
    print("\n\nFor this game you will have three tries", end=" ")
    print("at guessing a random number I have chosen.")
    start = input("Would you like to begin? ")
    if start.lower() == "yes":
        print("Okay ", name, "! Let's start.", sep="")
        print()
        # Generates random value from random module.
        random_value = random.randint(1, 10)
        time.sleep(1)
        for number in range(3):
            guess_value = int(input("Guess a number between 1 and 10: "))
            if guess_value != random_value:
                print("That is not the value I am thinking of! Try again.")
                print()          
                time.sleep(0.5)
            if guess_value == random_value:
                print("Good job! The value was indeed", random_value, end=".")
                print()
                loop()
    elif start.lower() == "no":
        print("Okay. Returning back to console. ")
        main()
    else:
        print("Oops! Sorry but that is an invalid input. Please try again.")
        guessing_game()
    print("You have used up all three of your chances. The correct number was", random_value, end=".")
    loop()
    guessing_game()


# This function generates two random integers ranging from 1-6, symbolizing the roll of dice.
# The two random integers are added and user gets one chance at guessing the sum of the two "dice rolls".
def dice_roll():
    print("\n\nFor this game you will bet on the sum of two dice rolls.")
    print("If you guess the correct total of the two, you win. If not you lose.")
    sum_roll = 0
    guess_roll = input("\nWhat do you think the sum of your two rolls will be? ")
    try:
        int(guess_roll)
        validation = True
    except ValueError:
        validation = False
    if not validation:
        print('\nThat is not a valid value. Please try again.\n')
    print("You selected", guess_roll, end="!")
    print("\nLet's see how lucky you are today.")
    begin = input("\nPress ENTER to roll your dice. ")
    if begin == "":
        # First roll generates a random number from one to six.
        print("\nRolling", end="")
        dot()
        roll_1 = random.randint(1, 6)
        sum_roll += roll_1
        print("\nYou rolled a", roll_1, end="!")
        # Second roll generates another random number from one to six.
        for second_roll in range(1):
            print("\n\nRolling again", end="")
            dot()
            roll_2 = random.randint(1, 6)
            # Computes the sum from the two dice rolls.
            sum_roll += roll_2
            print("\nYou rolled a", roll_2, end="!")
            print("\n")
        # If user guessed the correct number, they will be prompted with a winning message.
        if sum_roll == guess_roll:
            print("You win! The sum of your two rolls was", sum_roll, end="")
            print(" which was equal to your guess of", guess_roll, end="!")
            time.sleep(1)
        else:
            # If user guessed the incorrect number, they will be prompted with a losing message.
            print("You lost! The sum of your two rolls was", sum_roll, end="")
            print(" which was NOT equal to your guess of", guess_roll, end="!")
            time.sleep(1)
    print() 
    loop()
    dice_roll()
    
            
# This allows program to loop back to current function or return back to the main function.
def loop():
    resume = input("\nWould you like to continue? ")
    if resume.lower() == "yes" or resume.lower() == "y":
        print("Okay ", name, "! Continuing", sep="", end="")
        dot()
        print()
        return
    elif resume.lower() == "no" or resume.lower() == "n":
        print("Okay " + name + "!", "Returning back to console. ")
        main()
    else:
        print("Oops! Sorry but that is an invalid input ", name, ". Returning back to console.", sep="")
        main()
        
        
# This acts as a help menu that explains the console commands from main() in case the user is confused.
def directory():
    print("\nALL AVAILABLE COMMANDS:")
    print("Commands are denoted within quotation marks.\n")
    print("'math' = general arithmetic (addition, subtraction, multiplication, division, etc.)")
    print("'radians' = calculates radian and degree value of any number")
    print("'mmr' = calculates mean, median, and range of any set of given numbers")
    print("'guess' = generates a random number and gives user three chances at guessing it")
    print("'dice' = dice game that prompts user to bet on the sum of two di")
    terminate = input('\nPress ENTER when you are ready to return back to the console.\n')
    if terminate == "":
        main()
    else:
        main()
        

# This is the main function that allows the user to navigate to the different functions within the program.
def main():
    print('\nConsole Commands:')
    print("\n'math'")
    print("'radians'")
    print("'mmr'")
    print("'guess'")
    print("'dice'")
    print("'terminate'")
    # User will be guided to the next function depending on what selection they input.
    guide = input("\nEnter a command or type 'directory' for assistance: ")
    if guide.lower() == 'math':
        print('Okay ' + name + '. Navigating to math calculator', end='')
        dot()
        math_main()
    elif guide.lower() == 'radians':
        print('Okay ' + name + '. Navigating to the radians and degrees calculator', end='')
        dot()
        radians()
    elif guide.lower() == 'mmr':
        print('Okay ' + name + '. Navigating to mean, median, and range calculator', end='')
        dot()
        mean_med_range_inputs()
    elif guide.lower() == 'guess':
        print('Okay ' + name + '. Navigating to the guessing game', end='')
        dot()
        guessing_game()
    elif guide.lower() == 'dice':
        print('Okay ' + name + '. Navigating to dice game.', end='')
        dot()
        dice_roll()
    elif guide.lower() == "terminate":
        print("Thanks for stopping by ", name, "!", sep="")
        # This utilizes the exit function from sys module to end program.
        import sys
        sys.exit()
    elif guide.lower() == 'directory':
        directory()
    else:
        print("Oops! Sorry but that is an invalid input", name, ". Returning back to console.", sep="")
        main()


main()
